\contentsline {section}{\numberline {1}Introduction}{1}
\contentsline {section}{\numberline {2}Software Fault Isolation}{2}
\contentsline {subsection}{\numberline {2.1}Principle}{2}
\contentsline {subsubsection}{\numberline {2.1.1}Code generator}{2}
\contentsline {paragraph}{Confining memory accesses.}{3}
\contentsline {paragraph}{Protection of sandboxing mechanisms.}{4}
\contentsline {paragraph}{Controlled interactions with the protected program.}{4}
\contentsline {subsubsection}{\numberline {2.1.2}Code verifier}{4}
\contentsline {subsubsection}{\numberline {2.1.3}Pros and cons}{5}
\contentsline {subsection}{\numberline {2.2}SFI for other architectures}{5}
\contentsline {subsubsection}{\numberline {2.2.1}SFI for CISC architectures}{5}
\contentsline {subsubsection}{\numberline {2.2.2}NativeClient the implementation of SFI by Google}{6}
\contentsline {paragraph}{NativeClient for x86-32.}{6}
\contentsline {paragraph}{NativeClient for X86-64 and ARM.}{7}
\contentsline {subsection}{\numberline {2.3}SFI using a certified compiler}{8}
\contentsline {subsubsection}{\numberline {2.3.1}CompCert the verified compiler}{8}
\contentsline {paragraph}{CompCert.}{8}
\contentsline {paragraph}{Memory model of CompCert.}{9}
\contentsline {subsubsection}{\numberline {2.3.2}SFI with CompCert}{9}
\contentsline {paragraph}{Cminor.}{9}
\contentsline {paragraph}{Specification of the SFI transformation.}{9}
\contentsline {paragraph}{Masking in CompCert.}{10}
\contentsline {paragraph}{SFI transformations}{10}
\contentsline {subsubsection}{\numberline {2.3.3}Evaluation of the approach}{11}
\contentsline {subsection}{\numberline {2.4}Limits of SFI}{12}
\contentsline {section}{\numberline {3}Overview of the approach}{13}
\contentsline {subsection}{\numberline {3.1}ROP attacks}{13}
\contentsline {subsubsection}{\numberline {3.1.1}The stack}{13}
\contentsline {subsubsection}{\numberline {3.1.2}Buffer overflow}{13}
\contentsline {subsection}{\numberline {3.2}Description of the approach}{15}
\contentsline {subsubsection}{\numberline {3.2.1}Proposed solution}{16}
\contentsline {paragraph}{Fixing return addresses locations and stack alignment.}{16}
\contentsline {paragraph}{Detection of dangerous instructions.}{16}
\contentsline {paragraph}{Securing dangerous statements.}{17}
\contentsline {subsection}{\numberline {3.3}Security properties}{19}
\contentsline {subsection}{\numberline {3.4}Analysis of the approach}{19}
\contentsline {subsubsection}{\numberline {3.4.1}Conditions}{19}
\contentsline {paragraph}{Stack modifications.}{20}
\contentsline {paragraph}{Insecure libraries.}{20}
\contentsline {paragraph}{Modules need the same offset.}{20}
\contentsline {subsubsection}{\numberline {3.4.2}Discussion}{20}
\contentsline {paragraph}{Architecture dependant.}{21}
\contentsline {paragraph}{Memory consumption.}{21}
\contentsline {section}{\numberline {4}Implementation}{22}
\contentsline {subsection}{\numberline {4.1}CompCert stack}{22}
\contentsline {subsection}{\numberline {4.2}Fixed stack frames size}{23}
\contentsline {paragraph}{Fix the frames size.}{24}
\contentsline {paragraph}{Choice of frames size.}{24}
\contentsline {subsection}{\numberline {4.3}Stack alignment}{25}
\contentsline {paragraph}{ASLR.}{25}
\contentsline {paragraph}{Stack alignment.}{25}
\contentsline {paragraph}{Alignment algorithm.}{27}
\contentsline {subsection}{\numberline {4.4}Detection of memory write statements}{28}
\contentsline {paragraph}{Clight implementation.}{28}
\contentsline {paragraph}{Clight semantic.}{29}
\contentsline {subsection}{\numberline {4.5}Securing memory write statements}{30}
\contentsline {paragraph}{Distinguish stack and heap addresses.}{31}
\contentsline {paragraph}{Check the property $a\nobreakspace {}mod\nobreakspace {}n=0$.}{31}
\contentsline {paragraph}{Branchless check.}{32}
\contentsline {section}{\numberline {5}Evaluation of the implementation}{34}
\contentsline {subsection}{\numberline {5.1}Evaluation of security}{34}
\contentsline {paragraph}{Fixed stack frames without protection (Figure\nobreakspace {}23\hbox {}).}{34}
\contentsline {paragraph}{Complete implementation with protection (Figure\nobreakspace {}24\hbox {}).}{34}
\contentsline {subsection}{\numberline {5.2}Evaluation of performance}{34}
\contentsline {subsubsection}{\numberline {5.2.1}Efficiency}{35}
\contentsline {paragraph}{Fixed frames size performance.}{36}
\contentsline {paragraph}{\textit {if then else} and branchless comparison.}{36}
\contentsline {paragraph}{Relation between runtime checks and delay.}{38}
\contentsline {subsubsection}{\numberline {5.2.2}Stack frames size}{39}
\contentsline {subsection}{\numberline {5.3}Discussion}{40}
\contentsline {paragraph}{More tests.}{40}
\contentsline {paragraph}{Guard area between the stack and the heap}{41}
\contentsline {paragraph}{Protection of runtime checks.}{41}
\contentsline {paragraph}{Ways of improvement.}{42}
\contentsline {paragraph}{Transparency.}{42}
\contentsline {section}{\numberline {6}Conclusion}{43}
