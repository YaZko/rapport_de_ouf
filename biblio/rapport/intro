Un intérêt croissant pour les techniques de Software Fault Isolation pour les systèmes s'est fait ressentir ces dernières années. Software Faut Isolation (SFI) est une approche de protection de la mémoire par des moyens logiciels. L'objectif est qu'un programme protégé par SFI puisse chargé dans son espace mémoire des modules à risque sans que ces derniers puisse compromettre l'exécution du programme. Pour cela les techniques de SFI isolent ces modules à risque dans un segment de l'espace mémoire spécifique (ou bac à sable) en réécrivant leur code afin qu'ils vérifient les propriétés de sécurité définies par le SFI. Ensuite le code transformé sera analysé par un vérifieur qui confirmera que les transformations nécessaire pour que le module à risque soit bien isolé dans son bac à sable sont bien présentes.
D'autres mécanismes de la protection de la mémoire existent tels que des protections par le matériel ou par l'utilisation de langage fortement typés, cependant les techniques de SFI ont montré des performances élevées dans l'isolation de modules à risque pour un navigateur web. En effet des applications web s'exécutant côté client montrent des performances proches d'un code natif tout en profitant d'une sécurité due à l'isolation dans un bac à sable. Son usage ne se limite pas à ce cas on peut également imaginer son application à tout système critique ayant recours à des modules externes. Par exemple le système de pilotage d'un avion faisant appel à des modules écrits par des sous-traitants, des fermes de calculs qui doivent exécuter du code dont on ne connaît pas réellement l'origine ou le noyau d'un système utilisant des modules externes.
L'approche SFI comporte de nombreux avantages ce qui explique son attrait actuel, on peut d'abord noter des performance élevées comparées à certains autres mécanismes de protection (isolation matériel ou langage fortement typé). Ensuite pour fonctionner SFI nécessite d'une Trusted Computing Base relativement réduite, en effet seul le vérifieur de code qui confirme que le module à risque est bien sandboxé doit être impérativement fiable (et non le générateur de code).


